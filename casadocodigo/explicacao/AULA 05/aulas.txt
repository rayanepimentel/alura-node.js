Aula 02 - 

Remoção de livros

Precisamos criar uma rota oara antender a requsição para o método delete
app.delete('/livros/${livrosID}', function(req, resp){});

Precisamos que o express saiba que a informação que estamos passando na URL 
é a id do livro que queremos excluir, e que essa informação é variável para cada requisição. 
Felizmente, o express nos possibilita criar variáveis na própria URL da rota. 
Para isso, basta usarmos dois pontos (:) seguidos do nome da variável, que nesse caso é id.

Para recuperarmos esse valor, basta, dentro do callback, buscarmos o id entre os parâmetros 
dentro da requisição (req.params.id). Essa informação será salva em uma constante id.

Aula 04 -

Conseguir remover o livro:
arquivo estático
Cria uma nova pasta
Dentro da pasta "app", uma pasta "public" na qual ficarão os arquivos estáticos da nossa aplicação. 
Dentro dela, criaremos outra pasta, chamada "js", em que serão alocados especificamente os arquivos 
de JavaScript.

Moveremos o arquivo remove-livros.js para a recém-criada pasta "js". 
Precisaremos, então, filtrar as requisições que chegam à nossa aplicação. 
Já conhecemos um ótimo recurso para isso: os middlewares da plataforma Node.

Aula 06 -

Edição de livros
De volta ao arquivo rotas.js, criaremos uma nova rota para atender à URL /livros/form/:id - 
ou seja, a URL do nosso formulário de cadastro, com a adição de uma sintaxe para criação de variáveis.

Aula 08 - 

Editar o livro e não incluir um novo livro.

Metodo put

filtrar todas as requisições:
se tiver Id (do livro) - eu preciso editar - Ou seja trocar o method post para put;
SN tiver Id - o que eu quero fazer é add o livro

O que precisamos fazer é sobrescrever o method de envio da requisição dada a uma condição
especifica.

Felizmente, já existe um middleware que faz justamente isso, 
chamado method-override.